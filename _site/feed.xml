<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.5">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-04-17T15:34:16+05:30</updated><id>http://localhost:4000/feed.xml</id><title type="html">Saket Upadhyay</title><subtitle>Cybersecurity Student, Wannabe Malware Researcher. Reverse Engineering, Low Level Software Security, Penetration Testing.</subtitle><author><name>Saket Upadhyay</name></author><entry><title type="html">Digest [CipherCombat2.0 CTF write-up]</title><link href="http://localhost:4000/2020/04/13/CipherCombat2-Digest.html" rel="alternate" type="text/html" title="Digest [CipherCombat2.0 CTF write-up]" /><published>2020-04-13T00:00:00+05:30</published><updated>2020-04-13T00:00:00+05:30</updated><id>http://localhost:4000/2020/04/13/CipherCombat2-Digest</id><content type="html" xml:base="http://localhost:4000/2020/04/13/CipherCombat2-Digest.html">&lt;div class=&quot;message&quot;&gt;
Reverse Engineering Challenge of Hacker Earth CipherCombat2.0
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/916/1*Nuc4N5RaZtr63_YQFhz_0g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-we-get&quot;&gt;What we get?&lt;/h3&gt;

&lt;p&gt;A zip file with password “hackerearth”… unzip it and we get a Linux Executable
&lt;img src=&quot;https://miro.medium.com/max/1400/1*vAjPVcnwMkk3vsJWwFYvCw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Notice I highlighted LSB(Least Significant Bit) ? We will see why later…&lt;/p&gt;

&lt;h3 id=&quot;solving-the-challenge&quot;&gt;Solving the challenge&lt;/h3&gt;

&lt;p&gt;Let’s do strings …&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*QituOMU8zpAkklSEngDR6g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;With strings we found some Texts but nothing like our flag.&lt;/p&gt;

&lt;p&gt;Important thing to see here is &lt;strong&gt;MD5 function calls&lt;/strong&gt; and use of &lt;strong&gt;libcrypto.so.1.1&lt;/strong&gt; points at use of MD5 hash algorithm.&lt;/p&gt;

&lt;p&gt;Further we can check this by listing all imports by RABIN2&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*Zs5ILlbbLfM-sZEeRbzljw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we see that MD5 global functions are important.&lt;/p&gt;

&lt;p&gt;Let’s check the disassembly now…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*mPe6hOAoX4GAUC4DhYytVA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that it compares the MD5 digest of string supplied with a hard coded MD5 value. We can also see it has moved hard-coded hex string to stack at &lt;strong&gt;0x000011ad&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Any ways, it is comparing with something in stack, and my favorite way is to fire up GDB and check the stack in real-time to get the data.&lt;/p&gt;

&lt;p&gt;Let’s have a look at GDB disassembly…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1368/1*lNZuiBDzkNvgSrHube7sgA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that string compare function is at *main+186 so we will put break point there.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*nmAFCPnQbBwgoA-1C2Jhuw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/766/1*6qb-pH2gzMPvaOLQhj3dtA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s run the program and provide random input.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*6ad6Uix5zcBN7SQhMBWVhw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We hit our breakpoints ! Let’s check registers, STRNCMP compares values stored in &lt;strong&gt;[R/ESI]&lt;/strong&gt; with &lt;strong&gt;[R/EDI]&lt;/strong&gt;…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*GEzuZe_tObGW6OpVnaz-Dg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So get address of our hard-coded hash loaded in stack, lets check it out how it’s doing.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*4ESNSFiNrykRXxfoo0mZ7w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we get our values now let’s reconstruct the MD5&lt;/p&gt;

&lt;p&gt;Remember about LSB? these values are stored like that, we need to convert it into MSB and then we can continue.&lt;/p&gt;

&lt;p&gt;Copy the values in any text editor and rearrange them as following…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*6W3H0okjKG1LlN5e5bNaFg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so at last we have our hash : &lt;strong&gt;53a167c8d4dc964f7d7838dd4ce2d137&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Only thing left to do is brute force it, we can use online services, the one I used and which they later provided in their free hint is https://hashes.org/&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*l3Cq8Jw-b3GGG3qS3V3REw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we have our flag :&lt;strong&gt;&lt;em&gt;HE{iamalmighty9}&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/988/1*K7A9d8L1oQ5QBzLxV6Ngkw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt; And here is a cross check with the challenge binary.&lt;/p&gt;

&lt;p&gt;Another Fun challenge! Done.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: we could have done it in 3–4 less steps by just converting the strings found in &lt;strong&gt;MOVABS&lt;/strong&gt; instructions,&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*8RgD9zk0eJD2S6szrk-1Dg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But what’s the fun in that, also i wanted to show you the dynamic analysis path. :-)&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Saket Upadhyay</name></author><category term="CTF Writeup" /><summary type="html">Reverse Engineering Challenge of Hacker Earth CipherCombat2.0</summary></entry><entry><title type="html">Locked [CipherCombat2.0 CTF write-up]</title><link href="http://localhost:4000/2020/04/13/CipherCombat2-Locked.html" rel="alternate" type="text/html" title="Locked [CipherCombat2.0 CTF write-up]" /><published>2020-04-13T00:00:00+05:30</published><updated>2020-04-13T00:00:00+05:30</updated><id>http://localhost:4000/2020/04/13/CipherCombat2-Locked</id><content type="html" xml:base="http://localhost:4000/2020/04/13/CipherCombat2-Locked.html">&lt;div class=&quot;message&quot;&gt;
Reverse Engineering Challenge of Hacker Earth CipherCombat2.0
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/976/1*er3VhPR2dIn2nI7BXu_uVg.png&quot; alt=&quot;&quot; title=&quot;Question Header&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-we-get-&quot;&gt;What we get ?&lt;/h3&gt;

&lt;p&gt;We get a zip file with our binary in it with password hackerearth.
&lt;img src=&quot;https://miro.medium.com/max/1400/1*YlLxAp6kziXd1d_db8HIUA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After unzipping the file, we can start looking at the binary.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*gYTW45PJ_L2Zap_-KENFlw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Important stuff : it’s Linux Executable and not stripped… This makes task easier.&lt;/p&gt;

&lt;h3 id=&quot;solving-the-challenge&quot;&gt;Solving the challenge&lt;/h3&gt;

&lt;p&gt;Let’s make the file executable by chmod.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*zLCzrFMLMXOzhGJfirn2Bg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now let’s run it once and see what it actually does…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*X657SCKYqyTcoQsLsdrSvA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So seems like some type password check, and the name of challenge checks out !&lt;/p&gt;

&lt;p&gt;Let’s Disassemble it and try to understand the checking mechanism.&lt;/p&gt;

&lt;p&gt;doing Strings on the file we get something interesting…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1262/1*jcUCXvcFuhsdFUZUODtQEQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Looks like good password? Also if we see the disassembly we see main calls the &lt;strong&gt;fun2()&lt;/strong&gt; function before &lt;strong&gt;test eax,eax&lt;/strong&gt; at &lt;strong&gt;0x000012d7&lt;/strong&gt; which controls the flow of program… and see what it compares! the same string !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*MvkJYxg2J9qjStMB20DYIw.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/1400/1*s1VfuFXEvf_Z5GjST_vXVg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s just try this as password…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*3oQeagCI-u_3zWlyJxgr6g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And that works ! submit the flag and get them points…&lt;/p&gt;

&lt;h3 id=&quot;about-ctf&quot;&gt;About CTF&lt;/h3&gt;

&lt;p&gt;Hacker Earth’s CipherCombat2.0 was great CTF for beginners in the security field. Overall nice refresher.&lt;/p&gt;</content><author><name>Saket Upadhyay</name></author><category term="CTF Writeup" /><category term="CTF" /><summary type="html">Reverse Engineering Challenge of Hacker Earth CipherCombat2.0</summary></entry><entry><title type="html">Shifter2 [CipherCombat2.0 CTF write-up]</title><link href="http://localhost:4000/2020/04/13/CipherCombat2-Shifter2.html" rel="alternate" type="text/html" title="Shifter2 [CipherCombat2.0 CTF write-up]" /><published>2020-04-13T00:00:00+05:30</published><updated>2020-04-13T00:00:00+05:30</updated><id>http://localhost:4000/2020/04/13/CipherCombat2-Shifter2</id><content type="html" xml:base="http://localhost:4000/2020/04/13/CipherCombat2-Shifter2.html">&lt;div class=&quot;message&quot;&gt;
Reverse Engineering Challenge of Hacker Earth CipherCombat2.0
&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/986/1*5HJibwnLn_XKQpwXrS_AJg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-we-get&quot;&gt;What we get?&lt;/h3&gt;

&lt;p&gt;A zip file with password “hakerearth”… In there we find a PNG image&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*0grm3yTRon_G1N1rVhir4Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Checking the file for strings and embedded files we find nothing, and this is reverse engineering challenge so we will not go for stenography mumbo jumbo.&lt;/p&gt;

&lt;h3 id=&quot;lets-solve-this&quot;&gt;Let’s Solve this&lt;/h3&gt;

&lt;p&gt;Looking at the image, we can see it’s Graph representation of assembly code, and here is the image we get :-&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/3510/1*L7e4TQtggVNv8lVNdJayWw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now let’s try to understand what this is trying to do.&lt;/p&gt;

&lt;h4 id=&quot;1st-block&quot;&gt;1st Block&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1000/1*4Wqzg1mliI6Icey6dz102Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The first block is our MAIN() function taking some arguments&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;envp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;argc = no of arguments

argv = argument pointer

envp = enviornment pointer

It initializes bunch of variables and then stack setting routine.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;we also see that it compares argc with 1 followed by JE condition&lt;/p&gt;

&lt;p&gt;checking number of arguments should be equal to 2, argv[0] is always program name and argv[1] is our supplied password. That means we have to give &lt;strong&gt;exactly ONE parameter&lt;/strong&gt; to the program.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1000/1*WrOeYnyhUO_IukWtAGUb8Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the condition is not satisfied it’s putting 1 in EAX (that’s our return register) and then returning from the main() routine, that’s equivalent to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit(1);&lt;/code&gt;, but here implemented through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return 1;&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;2nd-block&quot;&gt;2nd Block&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1000/1*pkXCvu2IckRwOkC4UCNHXg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Most of this block is just initialization of some variables and then a jump statement to get to next block.&lt;/p&gt;

&lt;p&gt;also interesting thing to notice is that address spaces are separated by 4bytes each, looks similar? Yes, it’s character &lt;strong&gt;array allocation of 15 characters.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;then it sets &lt;strong&gt;var_4h = 1&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Let’s start building the program to side by side…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*ucuhdJV_NSM0XJqK_LZnWw.png&quot; alt=&quot;&quot; title=&quot;Array Recreated in Python&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;3rd-block&quot;&gt;3rd Block&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1000/1*baW1SBXF4GzcBL_vmlhuVg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now this looks like&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Initialize a var &amp;gt; do something &amp;gt; add 1 to it&amp;gt; check if var =&amp;gt;0xf i.e (15)base &amp;gt; repeat
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Looks familiar? loops something with increasing variable?&lt;/p&gt;

&lt;p&gt;It’s nothing but a &lt;strong&gt;for()/while()&lt;/strong&gt; loop implementation which iterates for 15 times, same as our character array length.&lt;/p&gt;

&lt;p&gt;so let’s define it as&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;≤&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;also, at the end of loop body it compares something and if it fails it shows “Better Luck next time” and then exit.&lt;/p&gt;

&lt;p&gt;Other wise it completes the loop and exit with “c0ngrats!” message.&lt;/p&gt;

&lt;h4 id=&quot;the-loop-body&quot;&gt;The Loop Body&lt;/h4&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/898/1*zsGBKxn_DxW26ofiVq6_Bw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The loop body is pretty interesting, it might look intimidating to new reverse engineer but it’s really simple.With some experience, you can already tell what it’s doing.&lt;/p&gt;

&lt;p&gt;Let’s have a look at it.&lt;/p&gt;

&lt;p&gt;now as we know it’s a loop and var_4h is our control variable let’s call it “i”. First we load the value of i in EAX, then we load the address of rax*8 to RDX, and then move our ARGUMENT(var_60h) into RAX. Then we do logical and RAX,RDX and mov Quad Word value at address of RAX to RAX, now we Move with Zero extended (movzx) byte value of RAX to …… ahhhhh… i am pretty sure this does not make it easier for you to understand it, all i am doing is dictating the instructions one by one…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Know this : Look at it, remember the pattern and know that it is one of the methods compilers implement &lt;strong&gt;fetching an element at some given index.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;You can ofcourse take some values yourself and try this but the full explaination is out of scope for this writeup, also it will make it boring and long enough.&lt;/p&gt;

&lt;p&gt;Some important instruction reference (links):&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.felixcloutier.com/x86/cbw:cwde:cdqe&quot;&gt;Convert Doubleword to Quadword (CDQE)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.felixcloutier.com/x86/movzx&quot;&gt;Move with Zero-Extend (MOVZX)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.felixcloutier.com/x86/movsx:movsxd&quot;&gt;Move with Sign-Extension (MOVSX)&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Okay so what it actually did? Lemme explain:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Take value at [i-1] index from our argument &lt;strong&gt;=argv[i-1] let’s say = arg&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Take value at [i-1] index from our character array = charp[i-1]&lt;/li&gt;
  &lt;li&gt;Add i to our charp = charp[i-1]+i&lt;/li&gt;
  &lt;li&gt;Add 1 to Step3 = &lt;strong&gt;charp[i-1]+i+1 , let’s say = charpnew&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;Compare &lt;strong&gt;arg == charpnew&lt;/strong&gt;.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/200/1*bdGkZ4cylX17rnq36F7DJA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These instructions are responsible for step 3 and 4, remember we stored our i in EAX ? and then we add EAX (i.e. i )to ECX, our element which is stored in EAX and then again add 1 to new EAX.&lt;/p&gt;

&lt;p&gt;and now converting it to code we have :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1324/1*SnTdBpFKV0kYQU_rqXCEvA.png&quot; alt=&quot;&quot; title=&quot;Code reversed from Assembly Graph&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now instead of checking the flag we can print it !!&lt;/p&gt;

&lt;p&gt;Here’s is relatively clean Python Implementation of above algorithm, Running it spits out the flag.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#!/bin/python3
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;given_array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mh&quot;&gt;0x71&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x65&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x61&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
             &lt;span class=&quot;mh&quot;&gt;0x2c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x6a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
             &lt;span class=&quot;mh&quot;&gt;0x68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x68&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x5f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;given_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;chr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;given_array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*-Cw8YRpP7UzyLHpl7eFzWg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we got the flag &lt;strong&gt;HE{shift3r_returns}&lt;/strong&gt; we can also check it with the C++ program we reconstructed.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*TKgw7s99BDWM9zeHEcGHew.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it for this challenge, actually an easy one, just some basic experience in reverse engineering needed.&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Saket Upadhyay</name></author><category term="CTF Writeup" /><category term="CTF" /><summary type="html">Reverse Engineering Challenge of Hacker Earth CipherCombat2.0</summary></entry><entry><title type="html">Extracting packer injected malware from memory [Remcos RAT]</title><link href="http://localhost:4000/2020/03/08/Extracting-packer-injected-malware.html" rel="alternate" type="text/html" title="Extracting packer injected malware from memory [Remcos RAT]" /><published>2020-03-08T00:00:00+05:30</published><updated>2020-03-08T00:00:00+05:30</updated><id>http://localhost:4000/2020/03/08/Extracting-packer-injected-malware</id><content type="html" xml:base="http://localhost:4000/2020/03/08/Extracting-packer-injected-malware.html">&lt;div class=&quot;message&quot;&gt;
Extraction of injected malicious PE from dynamic memory in windows (Remcos malware)
&lt;/div&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;Usually, malware comes packed by some packer which obfuscates the original code and helps it to evade AV software or general human suspicion. When executed the packed binary inject actual binary in the memory and runs it from there.&lt;/p&gt;

&lt;h3 id=&quot;what-we-will-cover-in-this-write-up&quot;&gt;What we will cover in this write-up?&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Approach for setting break-point in packed binary to stop it in midst of injecting the malicious code and executing it.&lt;/li&gt;
  &lt;li&gt;Bypassing malware’s “debugger bypass tricks”&lt;/li&gt;
  &lt;li&gt;Locate and dump injected code from the memory.&lt;/li&gt;
  &lt;li&gt;Do necessary patching.&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;setup-environment-&quot;&gt;Setup Environment :&lt;/h5&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Operating_System :&lt;/strong&gt; Windows 10, Enterprise Evaluation 180914 
&lt;strong&gt;Software_Arsenal :&lt;/strong&gt; x32debugger, PE bear, Hexadecimal Editor HxD 
&lt;strong&gt;Malware_Binary :&lt;/strong&gt; Remcos&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;what-is-remcos-rat&quot;&gt;What is Remcos RAT?&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://blog.malwarebytes.com/detections/trojan-remcos/&quot;&gt;Here you go, blog.malwarebytes.com&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;want-to-follow-up-with-the-article&quot;&gt;Want to follow up with the article?&lt;/h4&gt;

&lt;p&gt;Here’s your malware, handle with &lt;strong&gt;&lt;em&gt;care and caution.&lt;/em&gt;&lt;/strong&gt;
&lt;a href=&quot;https://malshare.com/sample.php?action=detail&amp;amp;hash=15fdc5c025e9d1645df07110c455aa09&quot;&gt;Malshare RemCos Download Link&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lab-setup-and-initial-inspection&quot;&gt;Lab setup and Initial Inspection&lt;/h3&gt;

&lt;p&gt;We will be using our Windows 10 Virtual Machine. We have set networking to “HOST ONLY” to transfer the binary to VM via Python’s SimpleHTTPServer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*diqgBrGTPCwzjJGAYxFbxA.png&quot; alt=&quot;&quot; title=&quot;python server in host&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/1400/1*mdrm2R22TaYYN2yLXMzyYA.png&quot; alt=&quot;&quot; title=&quot;Downloading Binary in VM&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we have our binary, before starting we will &lt;strong&gt;shut down network and folder sharing in VM&lt;/strong&gt; to prevent chaos if things goes sideways.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*E4-CrEFvjonmBBkqG3FyJA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Let’s rename our binary to RemCOS.bin and start investigation with PE Bear.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*B_E8ArBPGcNpJ5LmcLQINw.png&quot; alt=&quot;&quot; title=&quot;MSVBVM60.DLL points at VisualBasic6 code&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The binary seems to be a VB6 packer. Lets fire up x32debugger and load our binary in it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*S7TM3SyUNdhvGnroDUBlXA.png&quot; alt=&quot;&quot; title=&quot;RemCOS.bin in x32Debugger&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;setting-break-point-at-createprocessinternalw&quot;&gt;Setting Break-point at CreateProcessInternalW&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;What’s &lt;a href=&quot;https://attack.mitre.org/techniques/T1106/&quot;&gt;CreateProcessInternalW&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*PUH4ZBp2sxWhY0ax97dp7A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This API call allows the program to spawn a new process from itself, usually packers use this method to inject actual malware code in memory and execute them using CreateProcessInternalW.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/258/1*xCiuR-I0wHS5qbrCmUN48Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Without more delay let’s create a breakpoint here. Type:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bp CreateProcessInternalW&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In cmd. section and press enter.&lt;/p&gt;

&lt;h3 id=&quot;bypassing-debugger-detection&quot;&gt;Bypassing Debugger Detection&lt;/h3&gt;

&lt;p&gt;As we continue to execute the binary, we stumble upon one interesting Exception. This can be an anti-debugger tactics or just some random exception from one of VB6 APIs. Anyways this is blocking us from hitting our intended break-point.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1072/1*OA_xBTt0ojDD3i_9yLOqlQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To bypass this, do &lt;strong&gt;Debug &amp;gt; Advanced &amp;gt; Run (pass exceptions)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*KZkkxfJU9hdxrum5iqNn-w.png&quot; alt=&quot;&quot; title=&quot;Passing all exceptions to binary, so that it’s not countered by debugger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will pass all the exceptions to program as it would do in normal execution. Now we can hit out break-point :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/858/1*OsKEWja66BL5PRHLjOTbiw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;finding-and-dumping-injected-code&quot;&gt;Finding and Dumping Injected Code&lt;/h3&gt;

&lt;p&gt;We now know that it’s trying to run something from memory, we need to find what is it.&lt;/p&gt;

&lt;p&gt;For that goto &lt;strong&gt;Memory Map&lt;/strong&gt;. As we know that most of Portable Executable File (PE File) has a DOS header which says something like “This program cannot be run in DOS mode” or something like that. We can try to search for this string in our memory map, and let’s see what we get.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*1r1K9JRiYafo3vrMV3RL1Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After the search we found following hits:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*daYJlZpCbuRPdoiXwWW0xg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now we need to find our injected code, but here’s a hurdle : any file that contains our string “This program..” will be listed, including most of the microsoft’s own DLLs and support libraries.&lt;/p&gt;

&lt;h3 id=&quot;finding-the-injected-executable-code&quot;&gt;Finding the injected executable code&lt;/h3&gt;

&lt;p&gt;Now we have to trace each of the hits to check if it’s the code we are looking for or something else.&lt;/p&gt;

&lt;p&gt;Select one of all listed entries : &lt;strong&gt;Follow in Dump &amp;gt; Follow in Memory Map&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*Afh9hdo_TOMPeep1mpWYag.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1306/1*pF2iREtDJ8GHkIqwLvbykQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will know when you will find something unusual like : Unnamed section in memory with &lt;strong&gt;R&lt;/strong&gt;ead &lt;strong&gt;W&lt;/strong&gt;rite and &lt;strong&gt;E&lt;/strong&gt;xecutable permission.&lt;/p&gt;

&lt;p&gt;Select and &lt;strong&gt;“Dump Memory to File”&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1200/1*pjOOoq-wN6tIJEzDELYmFg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*rKmW9wXkluX-nOOEYnCbTg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We named it “remcos_extracted.bin” , let’s test it with PE Bear to make sure it was injected executable :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*AOa9LeBVpq7ClPjPUDauxA.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Hmmmm… now what?&lt;/strong&gt; but we found our DOS header and all right?&lt;/p&gt;

&lt;p&gt;Let’s inspect the file in Hex Editor&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*0ipjycn3vKmR1FwMxK8Uhw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*bLprdOz8P0UyZibX4SfNFw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And we have our DOS header… then? WHY PE BEAR IS NOT WORKING?&lt;/p&gt;

&lt;p&gt;This is because the file signature or magic number is not present !! Remember PE files start with &lt;strong&gt;“MZ.”&lt;/strong&gt; header?&lt;/p&gt;

&lt;h3 id=&quot;fixing-extracted-binary-header-signature-fix&quot;&gt;Fixing Extracted Binary [Header Signature Fix]&lt;/h3&gt;

&lt;p&gt;Now we know what’s missing, let’s repair the binary by placing missing header in place. But where to put it?&lt;/p&gt;

&lt;p&gt;Let’s go to check list method :&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;MZ header usually aligns with starting offset.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;about ~60 bytes before DOS header&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;https://i.stack.imgur.com/0DdKh.png&quot;&gt;PE FORMAT &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*PrBFxUXOvFotdMmVuhz-Fw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So let’s clean all the Zero padding before 0x000600 as this seems to be good place for our signature and fits our checklist.&lt;/p&gt;

&lt;p&gt;Clean all the padding above and modify first 2 Bytes as &lt;strong&gt;4D 5A&lt;/strong&gt; hexadecimal for &lt;strong&gt;MZ&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*xng5ZjsiO9CorNTfNSw6qA.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/1400/1*oWvk1kbCDw4f-RG2thpt7g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Save the file and … Now let’s check this in PE BEAR&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*d9FEHk3tvzF-SKjdp9qibg.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/1400/1*lYxvu0zotmOzAAkD1BAcVw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Cool ! everything is fine.&lt;/p&gt;

&lt;p&gt;AND we have our memory injected malware out in open!&lt;/p&gt;

&lt;p&gt;Now we can fire up IDA or whatever rocks your boat to further analyze the extracted malware.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*RVcQFMYOL7U7Vb0uyx2rjw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we will leave that for another article, (’cause ofcourse you can see how excited IDA is with this RAT) it will take much more space and time to clear out all those crazy Call Graphs.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;I hope this will come in handy for someone. This was actually super cool to me.&lt;/p&gt;

&lt;p&gt;I was playing with windows memory recently and will share more as it comes. Till then… stay caffeinated enough and keep roaming in the memory lanes(pun intended)of windows.&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://youtu.be/DIH4SvKuktM&quot;&gt;OA LABS ANALYSIS VIDEO&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://countuponsecurity.com/tag/finding-injected-code-into-memory/&quot;&gt;Finding injected code into memory - Count Upon Security&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Saket Upadhyay</name></author><category term="Reverse Engineering" /><category term="Malware Analysis" /><summary type="html">Extraction of injected malicious PE from dynamic memory in windows (Remcos malware)</summary></entry><entry><title type="html">Recover Deleted Files in Linux from Live Running Processes</title><link href="http://localhost:4000/2020/02/02/Recover-Deleted-Files-in-Linux.html" rel="alternate" type="text/html" title="Recover Deleted Files in Linux from Live Running Processes" /><published>2020-02-02T00:00:00+05:30</published><updated>2020-02-02T00:00:00+05:30</updated><id>http://localhost:4000/2020/02/02/Recover-Deleted-Files-in-Linux</id><content type="html" xml:base="http://localhost:4000/2020/02/02/Recover-Deleted-Files-in-Linux.html">&lt;div class=&quot;message&quot;&gt;
Recover recently deleted file (if it’s still open in some process) using properties of procfs
&lt;/div&gt;

&lt;!--more--&gt;

&lt;p&gt;Ever deleted an important file while it’s still open in some other process?
or Someone opened a PDF file in your PC from pen drive and removed the pen drive while it’s still open in some PDF-Viewer and you wanted to save it first and now you are just not touching that process because that’s the last trace of that file left in your computer?&lt;/p&gt;

&lt;p&gt;Well, luckily you have &lt;strong&gt;procfs&lt;/strong&gt; to your rescue. Let’s check the definition :&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;/proc&lt;/strong&gt; is very special in that it is also a virtual filesystem. It’s sometimes referred to as a process information pseudo-file system. It doesn’t contain ‘real’ files but runtime system information (e.g. system memory, devices mounted, hardware configuration, etc). For this reason it can be regarded as a control and information centre for the kernel. In fact, quite a lot of system utilities are simply calls to files in this directory. For example, &lt;strong&gt;‘lsmod’&lt;/strong&gt; is the same as ‘&lt;strong&gt;cat /proc/modules’&lt;/strong&gt; while &lt;strong&gt;&lt;em&gt;‘lspci’ is a synonym for ‘cat /proc/pci’&lt;/em&gt;&lt;/strong&gt;. By altering files located in this directory you can even read/change kernel parameters (sysctl) while the system is running.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;sup&gt;source : &lt;a href=&quot;https://www.tldp.org/LDP/Linux-Filesystem-Hierarchy/html/proc.html&quot;&gt;www.tldp.org&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup.&lt;/h3&gt;

&lt;p&gt;For this demonstration we just need one pdf file and… well that’s it!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[I am using Ubuntu 18.04 LTS for this demo.]&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to&quot;&gt;How to.&lt;/h3&gt;

&lt;p&gt;Let’s follow this step-by-step.&lt;/p&gt;

&lt;h4 id=&quot;step-0&quot;&gt;STEP 0:&lt;/h4&gt;

&lt;p&gt;Open the PDF file with default PDF viewer.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*ZbJE03T5B3HXw4yuf_cnMQ.png&quot; alt=&quot;&quot; title=&quot;PDF document open in a PDF viewer (Ubuntu 18.04 LTS)&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-1&quot;&gt;STEP 1:&lt;/h4&gt;

&lt;p&gt;DELETE THE FILE. FROM THE FOLDER. P E R M A N E N T L Y.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1280/1*7rcljwEYNFzH2cY-lPXEmw.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/552/1*36beTPYYSIqjvCgSZrvK-g.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-2&quot;&gt;STEP 2:&lt;/h4&gt;

&lt;p&gt;Now as we have deleted the file, let’s get on work to recover that.&lt;/p&gt;

&lt;p&gt;Let’s fetch our PDF viewer’s PID (Process ID) using “ps”&lt;/p&gt;

&lt;p&gt;What’s pid you might ask? here…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;the process identifier (a.k.a. process ID or PID) is a number used by most operating system kernels — such as those of Unix, macOS and Windows — to uniquely identify an active process.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;sup&gt;source : &lt;a href=&quot;https://en.wikipedia.org/wiki/Process_identifier&quot;&gt;WikiPedia&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*iCZcVmfFRLe2poxYp8vHzg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;so now we have our PID = &lt;strong&gt;5201.&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-3&quot;&gt;STEP 3:&lt;/h4&gt;

&lt;p&gt;Let’s go to /proc/&lt;strong&gt;&amp;lt;pid&amp;gt;&lt;/strong&gt;,yes that’s how your Linux PC keeps track of processes.&lt;/p&gt;

&lt;p&gt;In our case it’s &lt;strong&gt;&lt;em&gt;/proc/5201/&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*oiitajakNYIaKFXmPYlD6Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-4&quot;&gt;STEP 4:&lt;/h4&gt;

&lt;p&gt;We will now try to locate the file descriptor for our target file in the process, file descriptor? here you go…&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;A &lt;strong&gt;file descriptor&lt;/strong&gt; is a number that uniquely identifies an open file in a computer’s operating system. It describes a data resource, and how that resource may be accessed.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Now, go to “fd” (file descriptor) folder.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*YzcnPHuUv8vMMJs_wlcBZw.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We can see that &lt;strong&gt;file descriptor 14&lt;/strong&gt; points to our ex-impotant-ish file DocumentPDF.pdf and smartly shows “(deleted)” status after it.&lt;/p&gt;

&lt;p&gt;But our program still has access to the PDF file and it’s open there, so how? ‘cause file descriptor points to the file’s actual real-time location from which the program is using it,so if not on disk then in memory.&lt;/p&gt;

&lt;h4 id=&quot;step-5&quot;&gt;STEP 5:&lt;/h4&gt;

&lt;p&gt;Just “cat” the file pointer to some other location, and that’s it!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/2000/1*BKXfsQkGCjjCiQmJgN9qog.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we write the file bit-wise to &lt;strong&gt;“restore.pdf”&lt;/strong&gt; using ‘cat’.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1024/1*c9Ht4a7Lm8CQavq7l-6sOQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AND BAM !!! We have our file back.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*naQC7KHea6tIdED5Tn9a1A.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;This is one of the things I found interesting enough while reading about Linux file system and mysteries of it’s file and process management techniques, which was worth sharing.&lt;/p&gt;

&lt;h3 id=&quot;from-here-&quot;&gt;From Here …&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Procfs&quot;&gt;PROCFS&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.tecmint.com/linux-process-management/&quot;&gt;All You Need To Know About Processes in Linux&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.computerhope.com/jargon/f/file-descriptor.htm&quot;&gt;What is a File Descriptor?&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Saket Upadhyay</name></author><category term="Linux" /><summary type="html">Recover recently deleted file (if it’s still open in some process) using properties of procfs</summary></entry><entry><title type="html">Winning Race Conditions</title><link href="http://localhost:4000/2019/12/21/Winning-Race-Conditions.html" rel="alternate" type="text/html" title="Winning Race Conditions" /><published>2019-12-21T00:00:00+05:30</published><updated>2019-12-21T00:00:00+05:30</updated><id>http://localhost:4000/2019/12/21/Winning-Race-Conditions</id><content type="html" xml:base="http://localhost:4000/2019/12/21/Winning-Race-Conditions.html">&lt;div class=&quot;message&quot;&gt;
Introduction to Race Condition Vulnerability and how to Exploit them.
&lt;/div&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;One fine day, someone, somewhere was absorbing random knowledge from the “great internet forums” and stumbled on a CTF challenge remake.&lt;/p&gt;

&lt;p&gt;The challenge was to read the flag from a file [duh… “capture the FLAG(CTF)”]… but here the file was owned by root user and the programs checks for the same and if it is so, then it will not read it for us.&lt;/p&gt;

&lt;p&gt;This actually took me hours of screaming and existential crisis, and then after looking at naked code for long enough with extensive internet researches, I found the solution (or the solution found me?). Anyways, this was cool enough for me to share with you, so here we go with an article.&lt;/p&gt;

&lt;h3 id=&quot;so-what-its-all-about&quot;&gt;So what it’s all about?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TL;DR :&lt;/code&gt; If the computer program tries to check for some condition more
than once, we try to change the state of the condition in between two?
transfers in attempt to deceive the program into behaving in the way we
want or it’s not supposed to work.&lt;/p&gt;

  &lt;p&gt;if you want to skip, &lt;a href=&quot;#exp&quot;&gt;jump to EXPLOIT&lt;/a&gt; section
&lt;img src=&quot;https://miro.medium.com/max/1000/1*2I7e7fdKmE9JOBmSEJHrPQ.png&quot; alt=&quot;Joke_Image.png&quot; title=&quot;It's supposed to be funny&quot; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In technical terms,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“A &lt;strong&gt;race condition&lt;/strong&gt; or &lt;strong&gt;race hazard&lt;/strong&gt; is the condition of an electronics, software, or other system where the system’s substantive behavior is dependent on the sequence or timing of other uncontrollable events. It becomes a bug when one or more of the possible behaviors is undesirable.” 
— &lt;a href=&quot;https://en.wikipedia.org/wiki/Race_condition&quot;&gt;WikiPedia&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In the light of computer security,&lt;/p&gt;

&lt;p&gt;“In software development, &lt;strong&gt;time-of-check to time-of-use (TOCTOU, TOCTTOU or TOC/TOU)&lt;/strong&gt; is a class of software bugs caused by a race condition involving the checking of the state of a part of a system (such as a security credential) and the use of the results of that check.”&lt;/p&gt;

&lt;p&gt;— says… guess who? …. &lt;a href=&quot;https://en.wikipedia.org/wiki/Race_condition&quot;&gt;WikiPedia&lt;/a&gt;, ofc.&lt;/p&gt;

&lt;p&gt;Let’s try to understand this while attempting to do the challenge we got.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;recreating-the-challenge&quot;&gt;Recreating the challenge.&lt;/h3&gt;

&lt;p&gt;Let’s first recreate the challenge in our own machine, so that we can try it while reading this article… cool? let’s go…&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We will be using Linux for all the things, ’cause Linux is Love. If you are already working on Linux just go on, you are doing great in life, if otherwise, you can use virtual machine for this tutorial and we are good.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;step-1&quot;&gt;Step 1:&lt;/h4&gt;

&lt;p&gt;Let’s create a file with root ownership which will create our flag. We can do this by following commands :&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;{th1s_fl@g_i5_wh@7_w3_s33k}&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; flag.txt
&lt;span class=&quot;nb&quot;&gt;chown &lt;/span&gt;root:root flag.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*pzsDxvYtEwgoDFNUV7OS7Q.png&quot; alt=&quot;ScreenShot.png&quot; title=&quot;ScreenShot&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;step-2&quot;&gt;Step 2:&lt;/h4&gt;

&lt;p&gt;Here’s the &lt;strong&gt;&lt;em&gt;C code&lt;/em&gt;&lt;/strong&gt; of challenge binary, used to read the root flag.txt&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]){&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;usage: %s &amp;lt;file&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed to stat %s: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;File %s is owned by root&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Couldn’t open %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;I know ! I know ! This is some aggressively jotted down code chunk and yes, but it works and it’s just packed by removing all unnecessary spaces and indentation.&lt;/p&gt;

&lt;p&gt;For now just copy it can paste in a *.c file and this will work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*J053Ay9Fe54ll59jXGvh8Q.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;after compiling we get the following behaviour from our program…&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*a6dcj44480Ugl9-LmSyKLg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;But we want it to somehow show the contents of the file, and that’s what we will try to do, but first let’s see what the program is actually doing and what we understand from it.&lt;/p&gt;

&lt;h3 id=&quot;dissection-of-c-code&quot;&gt;Dissection of C Code&lt;/h3&gt;

&lt;p&gt;Here’s beautified code for you,&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;errno.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;usage: %s &amp;lt;file&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stat_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed to stat %s: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stat_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;st_uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;File %s is owned by root&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Couldn't open %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;buf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://gist.github.com/Saket-Upadhyay/6f1c5e15c2b454d81f7826b64ae1df2d/raw/d7c083a03cce749158726b4131d1e50ab03e615f/raceconditionchallenge.c&quot;&gt;View Raw on GitHub&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, let’s try to understand its workings,&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 1 to 6&lt;/strong&gt; are just imports.(all hail header files)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 9,10,11&lt;/strong&gt; declares some obvious variables.&lt;/p&gt;

&lt;p&gt;Now we can see that we have 4 conditions before line 38 which will actually display the contents of the file. Let’s try to understand these.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;At line 13&lt;/strong&gt;, we have condition to check if the given arguments to the program equals “two” or not. actually that means we have to provide one file in the arguments, the other argument is just the program itself given by default. So according to this if we don’t provide a file to read this will execute&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;usage: %s &amp;lt;file&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;and then exit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*5FzFVOSl4vsYHjVTd9WzDg.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;At &lt;strong&gt;line 19&lt;/strong&gt;, we check if the file contains valid formatted data or not, we can see in &lt;strong&gt;line 18&lt;/strong&gt; we defined object for &lt;strong&gt;stat&lt;/strong&gt; structure from &lt;strong&gt;sys/stat.h&lt;/strong&gt; header. In line 19 “if” condition we just check if we are able to extract information from the supplied file or not. If not, then we execute&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Failed to stat %s: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strerror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;which will print error message in standard error out and then exit.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://pubs.opengroup.org/onlinepubs/007908799/xsh/sysstat.h.html&quot;&gt;pubs.opengroup.org/onlinepubs/007908799/xsh/sysstat.h.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;At line 24, we check if the file is owned by root or not by checking the uid of the file. What’s UID ? check the link below…&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://geek-university.com/linux/uid-user-identifier-gid-group-identifier/&quot;&gt;UID AND GID IN LINUX&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The last check is at &lt;strong&gt;Line 32&lt;/strong&gt;, just checks if we are able to successfully open the file as read only or not. Notice that file open at Line 30? it’s there to check for that only, no big deal here.&lt;/p&gt;

&lt;h4 id=&quot;overall-working-&quot;&gt;Overall working :&lt;/h4&gt;

&lt;p&gt;The program takes one argument as the file we want to open and then it will check if it’s a valid file or not and then checks for root ownership, and then if not owned by root it will try to open it as read only and then if successful in that it will show the contents.&lt;/p&gt;

&lt;h3 id=&quot;what-we-need-to-do&quot;&gt;What we need to do?&lt;/h3&gt;

&lt;p&gt;According to above information if we somehow convince the program that the file is not root we might be able to see the contents of the file, because this is the only barrier that out file has, it’s owned by root all other checks are just kind-of integrity checks.&lt;/p&gt;

&lt;h4 id=&quot;finding-the-race-condition-flaw&quot;&gt;Finding the race condition flaw&lt;/h4&gt;

&lt;p&gt;Now let’s see where’s the bug that we were talking about actually is…&lt;/p&gt;

&lt;p&gt;Here we need to focus… let’s examine the flow of the program again, and we can see that it uses &lt;strong&gt;argument argv[1]&lt;/strong&gt; two times in the file at significant interval.&lt;/p&gt;

&lt;p&gt;once at Line 19 :&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;if (stat(argv[1], &amp;amp;stat_data) &amp;lt; 0) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then in Line 30 :&lt;/p&gt;
&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;fd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;O_RDONLY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Interestingly, &lt;strong&gt;it check for the root ownership with the first use&lt;/strong&gt; and then actually opens the file to &lt;strong&gt;display the contents from second usage.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Now imagine if we are able to change the file in between two uses of the argument we might be able to tell the program that the file is not owned by root and then pass on the file owned by root to open !!&lt;/p&gt;

&lt;p&gt;Let’s try to understand this with a diagram.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*rLkHV47bazGNdWza9kPkmQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div id=&quot;exp&quot;&gt;&lt;/div&gt;

&lt;h3 id=&quot;the-exploit&quot;&gt;The Exploit&lt;/h3&gt;

&lt;p&gt;To exploit this vulnerability, we need to quickly swap the files before the other function calls it.&lt;/p&gt;

&lt;p&gt;After watching lots and lots of tutorials on system calls, Linux file management etc. in hopes to find any solution to this, eventually bumped into one.&lt;/p&gt;

&lt;p&gt;Okay, so we are going to use following things in our exploit&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;SYS_renameat2 [Systemcall] : &lt;a href=&quot;http://man7.org/linux/man-pages/man2/rename.2.html&quot;&gt;MAN7.ORG/LINUX/MAN-PAGES&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our idea is to swap / rename the two files so fast that we are able to pull off above described maneuver.&lt;/p&gt;

&lt;p&gt;Here is a small C code that can help us do that :&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;
#include &amp;lt;sys/syscall.h&amp;gt;
#include &amp;lt;linux/fs.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// source https://github.com/sroettger/35c3ctf_chals/blob/master/logrotate/exploit/rename.c&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SYS_renameat2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AT_FDCWD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AT_FDCWD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RENAME_EXCHANGE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Copy the C code and compile it normally with gcc, that being done, let’s understand the code :&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 1 to 7 are just imports&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 11&lt;/strong&gt; has infinite While loop as while(1) is always true&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Line 12 here has a super important&lt;/strong&gt; “syscall()” will call the system call from C program, here it calls renameat2 system call.&lt;/p&gt;

&lt;p&gt;We pass the two arguments as filenames we want to rapidly swap as argv[1] and argv[2]. Let’s understand other parameters:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;AT_FDCWD&lt;/strong&gt; :If pathname is relative and dirfd is the special value AT_FDCWD, then pathname is interpreted relative to the current working directory of the calling process.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;RENAME_EXCHANGE&lt;/strong&gt; — does an atomic exchange. Atomic exchange? yeah that’s new to me too … here it is&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;a href=&quot;http://www.embhack.com/atomic-operation-in-linux-kernel/&quot;&gt;Atomic Operation in Linx Kernel - EmbHack&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-the-exploit-&quot;&gt;HOW TO USE THE EXPLOIT ?&lt;/h3&gt;

&lt;p&gt;Now as we have the exploit and we know how it works, let’s use it.&lt;/p&gt;

&lt;p&gt;just create a temp. file with anything in it&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;./temp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now run the exploit program with the flag and temp file as its parameters&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*QUfK9dAuHDDBtg3RvYQitQ.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;this will not produce any output but let it run, it is swapping the two files rapidly.&lt;/p&gt;

&lt;p&gt;Now OPEN NEW TERMINAL and run readFlag program with flag as parameter.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*MbvBeaL5aKkPsBycGRjEQw.png&quot; alt=&quot;Flag.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;AND THERE WE HAVE IT !! our F L A G…&lt;/p&gt;

&lt;h4 id=&quot;sign-off&quot;&gt;Sign-off&lt;/h4&gt;

&lt;p&gt;Phew! that was lots of information for one article, I understand … may be it’s not that simple as I intended to make it but believe me when i say this… I was just amazed and overwhelmed with the knowledge I gained on my way through it and wanted to share it asap.&lt;/p&gt;

&lt;p&gt;Well I hope this was new to you too and you enjoyed it, if you have any suggestion or feedback, feel free to drop it in comments.&lt;/p&gt;

&lt;p&gt;See ya all in next article, till then keep your bodies caffeinated enough!&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;NOTE: here is an awesome video by LiveOverflow on the same topic and actually this is the one which inspired me to write about it. &lt;a href=&quot;https://www.youtube.com/watch?v=5g137gsB9Wk&amp;amp;feature=youtu.be&quot;&gt;YOUTUBE LINK&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>Saket Upadhyay</name></author><category term="Secure Coding" /><category term="Software Security" /><category term="CTF" /><summary type="html">Introduction to Race Condition Vulnerability and how to Exploit them.</summary></entry><entry><title type="html">Effortless Feature Extraction for your ML based Android Malware Detection project</title><link href="http://localhost:4000/2019/12/04/Effortless-Feature-Extraction.html" rel="alternate" type="text/html" title="Effortless Feature Extraction for your ML based Android Malware Detection project" /><published>2019-12-04T00:00:00+05:30</published><updated>2019-12-04T00:00:00+05:30</updated><id>http://localhost:4000/2019/12/04/Effortless-Feature-Extraction</id><content type="html" xml:base="http://localhost:4000/2019/12/04/Effortless-Feature-Extraction.html">&lt;div class=&quot;message&quot;&gt;
Streamline Permission-Based Feature Extraction for android data-set with one Python Script.
&lt;/div&gt;

&lt;h3 id=&quot;background&quot;&gt;Background&lt;/h3&gt;

&lt;p&gt;Malware detection and analysis has been the hot topic in security for a long time, overtime the malware writers upgraded their skills and complexity and this has been the main reason for us to find new effective methodologies for malware detection and classification.&lt;/p&gt;

&lt;p&gt;As with the boom of AI and ML to solve general problems,the malware analysis and detection is not left untouched. Many researches has been published in the domain of malware detection using Machine Learning approach. But before doing all the gizmo of model training and neural network formation or any of those wires in brain magic, we need to collect certain information from the target to train our machine, and that is what we call &lt;strong&gt;features&lt;/strong&gt; and that is what this article is all about, to get you started in the field.&lt;/p&gt;

&lt;h3 id=&quot;baseline&quot;&gt;Baseline&lt;/h3&gt;

&lt;p&gt;The following article only focus on feature generation and formatting, specifically permission-based feature generation for android application.&lt;/p&gt;

&lt;p&gt;Here we will only see how we can speed up this process by using simple script which Does It All will break it down in some other article where we will discuss feature extraction in general followed my training our own ML model to detect Android malware !&lt;/p&gt;

&lt;h3 id=&quot;the-script&quot;&gt;The Script&lt;/h3&gt;

&lt;p&gt;Lets get to the fun part, and explore the script itself.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Get the Project in &lt;a href=&quot;https://github.com/Saket-Upadhyay/Android-Permission-Extraction-and-Dataset-Creation-with-Python&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This script will extract permission information from Malware and Benign applications in their respective folders and then create one Comma Separated Values (.csv) file to store them in one place ready to be fed into ML algorithms.&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-the-script&quot;&gt;HOW TO USE THE SCRIPT?&lt;/h3&gt;

&lt;p&gt;Just copy your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Malware&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Benign&lt;/code&gt; applications on which you want to train your ML Model into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;respective folders&lt;/code&gt; and run the script by following command in terminal.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;python3 ExtractorAIO.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that’s it. yes. done. rest, the script will handle&lt;/p&gt;

&lt;h3 id=&quot;how-to-use-the-generated-data-set&quot;&gt;HOW TO USE THE GENERATED DATA-SET?&lt;/h3&gt;

&lt;p&gt;The generated data will be in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.csv&lt;/code&gt; format and can be parsed with the help of many already available libraries or modules. (pandas module in python is suggested)&lt;/p&gt;

&lt;h4 id=&quot;formatting&quot;&gt;Formatting&lt;/h4&gt;

&lt;script src=&quot;https://gist.github.com/Saket-Upadhyay/e713aa3fe50fd68895c0b50ebf83508b.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;sup&gt;This is sample data set of 6 applications (3 Malware &amp;amp; 3 Benign)&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;The 1st column contains &lt;strong&gt;NAME&lt;/strong&gt; of respective application and last column &lt;strong&gt;“CLASS”&lt;/strong&gt; contains information if the application if from benign or malware family of training set. &lt;strong&gt;[0=Benign, 1=Malware]&lt;/strong&gt;. In between there are all the permissions (common + all found in 1st phase) with respective information bit, &lt;em&gt;[0=The application do not use this permission, 1=This permission is used in the application]&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;importing-data-example-in-sklearn&quot;&gt;Importing Data Example in sklearn&lt;/h3&gt;

&lt;p&gt;Suppose you want to import your new data set into sklearn and train your new model from there, here’s a way you can do that.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;data.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;coulmnNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;iloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;FeatureNames&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;coulmnNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;LabelName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coulmnNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FeatureNames&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LabelName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asarray&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;feature_vectors&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_test_split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;feature_vectors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The above code will remove &lt;strong&gt;NAME&lt;/strong&gt; column and then store &lt;strong&gt;FEATURE_MATRIX&lt;/strong&gt; (from column after  NAME  to second last column) and &lt;strong&gt;LABEL_VECTOR&lt;/strong&gt; ( CLASS column) in X and Y respectively, which later can be split into desired training and testing sets.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;CONCLUSION&lt;/h3&gt;

&lt;p&gt;I hope this article will get you started with feature extraction for malware analysis using machine learning. It isn’t the end of it, but we just completed one step !&lt;/p&gt;

&lt;hr /&gt;</content><author><name>Saket Upadhyay</name></author><category term="Malware Detection" /><category term="Machine Learning" /><summary type="html">Streamline Permission-Based Feature Extraction for android data-set with one Python Script.</summary></entry><entry><title type="html">Taking over a software by Instruction Rewriting.</title><link href="http://localhost:4000/article/2019/11/25/Taking-over-a-software-by-Instruction-Rewriting.html" rel="alternate" type="text/html" title="Taking over a software by Instruction Rewriting." /><published>2019-11-25T00:00:00+05:30</published><updated>2019-11-25T00:00:00+05:30</updated><id>http://localhost:4000/article/2019/11/25/Taking-over-a-software-by-Instruction-Rewriting</id><content type="html" xml:base="http://localhost:4000/article/2019/11/25/Taking-over-a-software-by-Instruction-Rewriting.html">&lt;div class=&quot;message&quot;&gt;
  Baby steps to binary rewriting and reverse engineering.
&lt;/div&gt;

&lt;h3 id=&quot;background-story&quot;&gt;Background story&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;Almost every code we write and compile is converted into machine code and set of instructions.&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Pretty basic definition for what compiler does huh?&lt;/p&gt;

&lt;p&gt;Well, let me re-frame that with respect to a reverse engineer’s point of view,&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;It doesn’t matter if you write your code in C, C++ or C# it will be converted into machine code, which can be viewed as a common low level language, Assembly.&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;In simpler terms, all we need to understand is the assembly of code and without having its actual source code we can conclude what it will do. Now what to do from here?&lt;/p&gt;

&lt;p&gt;Imagine we got a program that will activate when provided with valid key, pretty common scenario right? You might say just buy the key, or download the crack etc. pretty boring solutions too… Now, what if I tell you, we can activate the program just by changing it’s binary, that too just 2–6 bytes! YES! And that’s what we will try to understand in this article.&lt;/p&gt;

&lt;p&gt;Actually most of such programs use comparison statements to check if your key matches with the actual key or not, e.g. “if (input == key) {//do thing here}” etc.&lt;/p&gt;

&lt;p&gt;And that very thing in assembly is done by “CMP” instruction and then followed by a “JMP” or similar instruction to shift the flow of controls according to the result of comparison.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;lets-do-it&quot;&gt;Let’s do it.&lt;/h3&gt;

&lt;p&gt;Let us make an application, this application works in the same fashion, check for the key and activate if matches. The program is written in C and compiled by the GCC compiler.&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;string.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Checking License: %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
                &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;strlen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;	
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Access Granted!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;WRONG!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Usage: &amp;lt;key&amp;gt;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is one example where we use “saket” as the key.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*K_G78S10NaB8cpo5rCagRg.png&quot; alt=&quot;&quot; /&gt;
As we expected it to behave, when provided with invalid key it will say “WRONG!”&lt;/p&gt;

&lt;p&gt;When we observe the compiled binary in our favorite debugger we can see one instruction &lt;strong&gt;“CMP [RBP+VAR_18], 394H”&lt;/strong&gt; that checks the string passed and then compares it with &lt;em&gt;(394)h =(916)d&lt;/em&gt; that seems to be string length or something, the interesting part is that it is followed by &lt;strong&gt;“JNZ SHORT LOC_400657”&lt;/strong&gt; instruction, which makes &lt;strong&gt;EIP&lt;/strong&gt; or &lt;strong&gt;instruction pointer&lt;/strong&gt; to point at 400657th location. In simple words, &lt;strong&gt;shifts the control flow to 400657th&lt;/strong&gt; location in memory , and execute instruction from there. Further we can see that &lt;strong&gt;LOC_400657&lt;/strong&gt; contains instructions of &lt;strong&gt;WRONG KEY&lt;/strong&gt; part of software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*QiRX5E9kSXkvrN7YyTFedg.png&quot; alt=&quot;&quot; /&gt;
So what if we can just skip that jump statement and whatever the result of the CMP we will just continue to &lt;strong&gt;Access Granted&lt;/strong&gt; part. To do that we will just &lt;strong&gt;change jump address in HEX DUMP from “0C” to “00”&lt;/strong&gt; which will cause &lt;strong&gt;EIP&lt;/strong&gt; to just continue to the next instruction.&lt;/p&gt;

&lt;p&gt;For that we will go to the hex equivalent of the instruction in dump and change the value in target address.
&lt;img src=&quot;https://miro.medium.com/max/1400/1*Ndw-9qh6-jx-Pw79bJhUiQ.png&quot; alt=&quot;&quot; /&gt;
here we can observe JNZ instruction starts at 400649 (relative address), we can go to same in hex dump to get equivalent hex values.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1378/1*uxriK_ycJjHxt-aYJYJ-3w.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;now we know that &lt;strong&gt;&lt;em&gt;JNZ SHORT LOC_400649 ~ 75 0C;&lt;/em&gt;&lt;/strong&gt; Now keeping JNZ intact, i.e. not changing 75, we can change 0C to 00 to try to null it’s effect. or we can just replace the next effective address,something like this :
&lt;img src=&quot;https://miro.medium.com/max/1042/1*OLDef_3bUFDIOlGgpSA3rg.png&quot; alt=&quot;&quot; /&gt;
But for this article, we will just replace 0C with 00…&lt;/p&gt;

&lt;p&gt;THAT IS, THIS
&lt;img src=&quot;https://miro.medium.com/max/121/1*9xX5CM7-5zkwUw-jLW_vsg.png&quot; alt=&quot;&quot; /&gt;
TO
&lt;img src=&quot;https://miro.medium.com/max/91/1*dUlh5aSmPdg0vdDGWOzXnw.png&quot; alt=&quot;&quot; /&gt;
And now you can see our instruction continues to ACCESS GRANTED part, and no instruction points to WRONG KEY. That means we should be able to activate the software with any key we want!.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*BVYRUDW4dLcBwd2jCT16HQ.png&quot; alt=&quot;&quot; /&gt;
Now let’s check that with the same key we provided, and just another key to check our modification.
&lt;img src=&quot;https://miro.medium.com/max/1400/1*-In-V9fwv_pAMbyqhCYTJg.png&quot; alt=&quot;&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/1400/1*wZb8fjJzQLS1MKEV0gO2xA.png&quot; alt=&quot;&quot; /&gt;
And that works pretty good!&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Binary rewriting in &lt;strong&gt;real-world scenarios is much more complex&lt;/strong&gt; than this example, but anyways this is just introduction with the aim to get the us familiar with the concept.&lt;/p&gt;

&lt;p&gt;I hope you enjoyed this, have a super productive day ahead !&lt;/p&gt;</content><author><name>Saket Upadhyay</name></author><category term="[&quot;Article&quot;]" /><category term="Reverse Engineering" /><summary type="html">Baby steps to binary rewriting and reverse engineering.</summary></entry><entry><title type="html">Pipe Brute-force Attack via Password Generator</title><link href="http://localhost:4000/article/2019/07/27/Pipe-Brute-force-Attack-via-Password-Generator.html" rel="alternate" type="text/html" title="Pipe Brute-force Attack via Password Generator" /><published>2019-07-27T00:00:00+05:30</published><updated>2019-07-27T00:00:00+05:30</updated><id>http://localhost:4000/article/2019/07/27/Pipe-Brute-force-Attack-via-Password-Generator</id><content type="html" xml:base="http://localhost:4000/article/2019/07/27/Pipe-Brute-force-Attack-via-Password-Generator.html">&lt;div class=&quot;message&quot;&gt;(Efficient and resource saving trick that was there for decades)&lt;/div&gt;

&lt;p&gt;During password cracking you might decide to brute force a target hash,any service or online website, for that you may need/create heavy dictionaries which can take terabytes of data. But we can skip that step and feed the password directly from generator to brute-force automation software.&lt;/p&gt;

&lt;h3 id=&quot;how-much-an-eight-digit-long-numeric-password-take-on-disk&quot;&gt;How much an eight digit long numeric password take on disk?&lt;/h3&gt;

&lt;p&gt;Let’s have a look on most basic and may-be-doesn’t-even-happen-today kind of scenario, creating a 8 digit numerical password with crunch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*G9AhPXlIYWLwoJkFD-z6GA.png&quot; alt=&quot;Image1.png&quot; /&gt;
858 MB for 8 digit numeric? not too big right, with our 1–2TBs of hard-drives it will do no harm to us.&lt;/p&gt;

&lt;p&gt;let’s come to real-life condition now, step-by-step …&lt;/p&gt;

&lt;p&gt;8 letter lowercase alphabets ? …
&lt;img src=&quot;https://miro.medium.com/max/1400/1*HKpP62dqfxk7o_V1W78uYA.png&quot; alt=&quot;&quot; /&gt;
1 TB ! just for our new word-list, and to be honest I am writing this from my PC with total storage of 1TB … if i remove all the files and OSes then i may store it, but again i need OS to perform attacks ¯_(ツ)_/¯.&lt;/p&gt;

&lt;p&gt;and this is last one fulfilling all the basic NEEDS OF MODERN WEBSITES.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;at least one UPPERCASE&lt;/li&gt;
  &lt;li&gt;use of NUMBERS&lt;/li&gt;
  &lt;li&gt;lowecase&lt;/li&gt;
  &lt;li&gt;SPECIAL SYMBOLS&lt;/li&gt;
  &lt;li&gt;Alien species’s language and what ever your PC allows you to throw at login filed!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;CHAR-SET =&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!”#$%&amp;amp;’()*+,-./:;&amp;lt;=&amp;gt;?@[]^_`{|}~
&lt;img src=&quot;https://miro.medium.com/max/1400/1*osEbNjaduUT5-BYTm0FvVQ.png&quot; alt=&quot;&quot; /&gt;
now unless you own a data storage farm to store 54303 TB of data, that would be ~ 27150 common 2TB storage drives, so let’s get over this problem by ‘piping’ the output directly to software rather than storing it in the device itself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;how-to-overcome-this-limitation&quot;&gt;How to overcome this limitation?&lt;/h3&gt;

&lt;p&gt;Suppose we want to crack the hash of password &lt;strong&gt;‘17652986’&lt;/strong&gt; now md5 of this hash &lt;strong&gt;ce5cff0195a6b059a3241c1b6202ab49&lt;/strong&gt; now we can either create a file of 8 digits numbers or can just pass the list from crunch directly to hashcat&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;crunch 8 8 123456789| hashcat &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; 0 ce5cff0195a6b059a32411b6202ab49
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;notice the &lt;strong&gt;‘|’&lt;/strong&gt; in the command? this is called &lt;strong&gt;‘pipe’&lt;/strong&gt; it will change the standard output of the crunch command to to hashcat and the hashcat when supplied no word-lists, listens on standard input.
&lt;img src=&quot;https://miro.medium.com/max/720/1*9adBjAYUSoDUAIB2TEnPnQ.png&quot; alt=&quot;&quot; title=&quot;Figure 1&quot; /&gt;
&lt;img src=&quot;https://miro.medium.com/max/552/1*_gFnA_SDFEufJ00sdbVo-A.png&quot; alt=&quot;&quot; title=&quot;Figure 2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Flow of data from buffer to brute-force program directly (left figure) — (1)&lt;/p&gt;

&lt;p&gt;Flow of data to hard-disk and then to the program (right figure) — (2)&lt;/p&gt;

&lt;p&gt;Here we can already see (1) is much faster and efficient in practice as it does not interact with the hard-disk at all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1400/1*SUUvuNKweFdpjLSMVaabcg.png&quot; alt=&quot;&quot; /&gt;
and you can see it took just 31 seconds to crack 8 digit numeric password &lt;em&gt;highlighted&lt;/em&gt;, but that’s predictable and speed here was not our concern.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;So, our motive here is complete as we have saved resources and hacking with all the skills is also all about speed, accuracy and efficiency.&lt;/p&gt;</content><author><name>Saket Upadhyay</name></author><category term="[&quot;Article&quot;]" /><category term="Password Cracking" /><summary type="html">(Efficient and resource saving trick that was there for decades)</summary></entry><entry><title type="html">Live Movement Tracing in Android using Polygraph Lines</title><link href="http://localhost:4000/2019/07/15/Live-Movement-Tracing-in-Android-using-Polygraph-Lines.html" rel="alternate" type="text/html" title="Live Movement Tracing in Android using Polygraph Lines" /><published>2019-07-15T00:00:00+05:30</published><updated>2019-07-15T00:00:00+05:30</updated><id>http://localhost:4000/2019/07/15/Live-Movement-Tracing-in-Android-using-Polygraph-Lines</id><content type="html" xml:base="http://localhost:4000/2019/07/15/Live-Movement-Tracing-in-Android-using-Polygraph-Lines.html">&lt;p&gt;Android already have accurate Geo location capabilities by using multiple sources like Cellular Networks, G.P.S. and nearby Wi-Fi connections. And that’s handful of sources to extract information from, but their working and synchronisation among each other is real beauty.&lt;/p&gt;

&lt;p&gt;I also want to share my views on “Location Detection” and “Location Tracing”, there is a difference between “Locating” something and Tracking/Tracing something, android’s pretty accurate in pointing you on globe, and of course we can use classes with some location permissions to request for location information but that would only give us a set of LAT,LON format integers to work with ; from that information we can only point someone/something (cause now-a-days things do have internet) so how to trace that movement?
&lt;img src=&quot;https://miro.medium.com/max/500/1*7FVgHe-XObuWDbCOYM4wdA.jpeg&quot; alt=&quot;Screen Shot 1&quot; title=&quot;Application Screen Shot&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;message&quot;&gt;In this write up i will use my selected location which is less concentrated like city to make things more clear and i had more space to roam here and there in any direction to test the application.&lt;/div&gt;

&lt;h3 id=&quot;some-thoughts-on-security-and-location-tracing&quot;&gt;Some thoughts on Security and Location Tracing&lt;/h3&gt;
&lt;p&gt;As a citizen of digital age and a cybersecurity student you cannot stop yourself thinking about implementation of things on the field.&lt;/p&gt;

&lt;p&gt;As we know knowing someone’s current location can give attacker a high attacking ground but knowing exactly where someone is going with which path is generally followed will help him in creating better plotted trap!&lt;/p&gt;

&lt;p&gt;The attacker can know where you are actually going and what’s your daily commute routine and plan accordingly.&lt;/p&gt;

&lt;h4 id=&quot;prevention&quot;&gt;Prevention?&lt;/h4&gt;

&lt;p&gt;Just turning off the GPS will not help much, as you will see in this post later, we can get location based on mobile network and nearby wifi networks too.&lt;/p&gt;

&lt;p&gt;Just lookout for unknown apps and sudden/ suspicious activation of GPS / Location services. as google tries to get most precise information so it may trigger “Networks+WiFi+GPS High Performance” which you usually can’t miss.&lt;/p&gt;

&lt;h3 id=&quot;idea-behind-movement-tracing&quot;&gt;Idea behind Movement Tracing.&lt;/h3&gt;

&lt;p&gt;So, the idea is pretty basic and actually we all learn it in our highschool mathematics, and that’s GRAPHS and how plotting works.&lt;/p&gt;

&lt;p&gt;We already know that we can get longitudes and latitudes from google itself in our app, just like points on graph of globe, the idea is to collect those points and then make a line from one to each other … easy? yeah its kind of easy.&lt;/p&gt;

&lt;h3 id=&quot;applying-idea-via-code&quot;&gt;Applying Idea via code.&lt;/h3&gt;

&lt;p&gt;So first we need to get permissions from the user to use location and internet.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&amp;lt;uses-permission android:name=”android.permission.ACCESS_FINE_LOCATION” /&amp;gt;
&amp;lt;uses-permission android:name=”android.permission.INTERNET” /&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;after setting up permissions in Manifest.xml, we can proceed further and get our Google API key to use, yeah, to use google maps and related functions we need to grab those, but it’s easy process, here lemme attach a link to a dedicated tutorial if you need.&lt;/p&gt;

&lt;h5 id=&quot;google-api-android-sdk&quot;&gt;&lt;a href=&quot;https://developers.google.com/maps/documentation/android-sdk/get-api-key&quot;&gt;Google API, Android SDK&lt;/a&gt;&lt;/h5&gt;

&lt;p&gt;so, as now you have the keys time to setup our app and get going …&lt;/p&gt;

&lt;p&gt;The code is actually long enough to take up 2–3 pages here so I think it would be better to just port the code directly and from GitHub and then modify as it pleases you.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Get the Repo from &lt;a href=&quot;https://github.com/Saket-Upadhyay/LiveLocationTriangulation&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;things-you-need-to-change-in-that-&quot;&gt;Things you need to change in that :&lt;/h5&gt;

&lt;p&gt;ENTER YOUR API KEY IN app/src/debug/res/values/google_maps_api.xml&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;string&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;”google_maps_key”&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;templateMergeStrategy=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;”preserve”&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;translatable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;”false”&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;YOUR-KEY-HERE&lt;span class=&quot;nt&quot;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And that would just do it.&lt;/p&gt;

&lt;p&gt;Clone the Repo and open it up in Android Studio, you may need to change some more code maybe to build it perfectly, cause no code I have ever cloned till now works in first go. ¯\&lt;em&gt;(ツ)&lt;/em&gt;/¯&lt;/p&gt;

&lt;h3 id=&quot;lets-understand-the-working&quot;&gt;Let’s understand the working&lt;/h3&gt;

&lt;p&gt;For the first time I would suggest you to just build the application as it is so that you can follow with this write-up after that feel free to modify the app and use it as it pleases your creativity.&lt;/p&gt;

&lt;p&gt;The app is divided in to 3 parts -&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Text Location Update&lt;/li&gt;
  &lt;li&gt;Location on Map&lt;/li&gt;
  &lt;li&gt;Using Polygraph and Algorithm to trace it on map&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;part-1&quot;&gt;Part 1:&lt;/h3&gt;

&lt;p&gt;This just tests the location set we can request from Google Maps API and represent them in text, also we can get which MODE is used in the process (GPS,NETWORK,WIFI).
&lt;img src=&quot;https://miro.medium.com/max/1400/1*DAv3Pe_cFAZATxCxcu7GTg.jpeg&quot; alt=&quot;Screen Shot2.jpg&quot; title=&quot;Screen Shot2&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;part-2&quot;&gt;Part 2:&lt;/h3&gt;

&lt;p&gt;This part integrates “Google Maps Activity” layout already available in Android Studio. The idea is to collect information from provider and then pass it to Maps Activity which will then place a marker on that location.
&lt;img src=&quot;https://miro.medium.com/max/1400/1*wq792anmgYKQ29zK10ONvw.jpeg&quot; alt=&quot;Screen Shot3.jpg&quot; title=&quot;Screen Shot3&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;part-3&quot;&gt;Part 3:&lt;/h3&gt;

&lt;p&gt;Well this is main section of the application which actually traces your location on map.&lt;/p&gt;

&lt;p&gt;The steps executed in this part are important,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Get location from provider
2. Set Red marker on starting point / initial location
3. Set Location Listener to check for location change
4. When ever location change is detected will add a point over map
5. Draw line joining those points
6. Place Green marker over last point.
7. Loop 1–6 until application is closed / location provide is not available.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Check out this Code for a moment …&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationpolymorph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sacredcoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;livelocationtriangulation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.Manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.app.Activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.content.pm.PackageManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.graphics.Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.location.Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.location.Geocoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.location.Location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.location.LocationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.location.LocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.support.annotation.RequiresApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.support.v4.app.ActivityCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.support.v4.app.FragmentActivity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.os.Bundle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;android.view.WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.CameraUpdateFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.GoogleMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.OnMapReadyCallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.SupportMapFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.JointType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.LatLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.Marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.Polyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.PolylineOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.io.IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PolyMap&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FragmentActivity&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OnMapReadyCallback&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GoogleMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Marker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;Marker&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;marker2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;LocationListener&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;LocationManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//for line&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Polyline&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Activity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;activity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LatLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@RequiresApi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Build&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;VERSION_CODES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;P&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedInstanceState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;setContentView&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;activity_poly_map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;getWindow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addFlags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;WindowManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;LayoutParams&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;FLAG_KEEP_SCREEN_ON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Obtain the SupportMapFragment and get notified when the map is ready to be used.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;SupportMapFragment&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mapFragment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SupportMapFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSupportFragmentManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findFragmentById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;R&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mapp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mapFragment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMapAsync&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getSystemService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;LOCATION_SERVICE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ActivityCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;checkSelfPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACCESS_FINE_LOCATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
                &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PackageManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;PERMISSION_GRANTED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;ActivityCompat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestPermissions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ACCESS_FINE_LOCATION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;},&lt;/span&gt;
                    &lt;span class=&quot;no&quot;&gt;REQUEST_LOCATION_PERMISSION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//polyline.setColor(Color.GREEN);&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLocationChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

                &lt;span class=&quot;c1&quot;&gt;//if(location.hasAccuracy()) {&lt;/span&gt;
                  &lt;span class=&quot;c1&quot;&gt;//  if (location.getAccuracy() &amp;lt; 20.0f) {&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLatitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLongitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                        &lt;span class=&quot;c1&quot;&gt;//get the location name from latitude and longitude&lt;/span&gt;
                        &lt;span class=&quot;nc&quot;&gt;Geocoder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;geocoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Geocoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getApplicationContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
                        &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
                                    &lt;span class=&quot;n&quot;&gt;geocoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFromLocation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLocality&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addresses&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCountryName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                            &lt;span class=&quot;nc&quot;&gt;LatLng&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LatLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;longitude&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;marker2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HUE_ROSE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

                                &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HUE_GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxZoomPreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;moveCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CameraUpdateFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newLatLngZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;

                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;120.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxZoomPreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;moveCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CameraUpdateFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newLatLngZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                            &lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;


                            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                                &lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPolyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PolylineOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAGENTA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jointType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JointType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
                            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

                            &lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;


                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                            &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
                        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
                  &lt;span class=&quot;c1&quot;&gt;//  }&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//}&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStatusChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bundle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;extras&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onProviderEnabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

            &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onProviderDisabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestLocationUpdates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NETWORK_PROVIDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestLocationUpdates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GPS_PROVIDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//TO MANAGE THE MAP AS ONE WHEN THE MAP VIEW IS AVAILABLE FOR THE USER.&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onMapReady&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;GoogleMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;googleMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMapType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAP_TYPE_SATELLITE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;removeUpdates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//CLOSE THE SESSION WHEN THE BACK IS PRESSED.&lt;/span&gt;
    &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;onBackPressed&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;finish&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can see here what ‘Location Listener’ is actually doing,&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LocationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onLocationChanged&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;location&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It is also interesting to see how we choose most precise location provider available&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;onProviderDisabled&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;provider&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestLocationUpdates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NETWORK_PROVIDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requestLocationUpdates&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;LocationManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;GPS_PROVIDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locationListener&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The next thing in this code to notice is how we are managing Polygraph Lines and Markers together to create lines on map&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.Marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; 
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.Polyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;    
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.google.android.gms.maps.model.PolylineOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;next comes the code for step 2,4 and 5&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;HUE_GREEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxZoomPreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;moveCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CameraUpdateFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newLatLngZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;marker&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MarkerOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;position&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;icon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;BitmapDescriptorFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;defaultMarker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;120.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setMaxZoomPreference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;moveCamera&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CameraUpdateFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newLatLngZoom&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;18.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;latLng&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;here we check marker position and add new points to our PolyLine&lt;/p&gt;
&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setPoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;polyline&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addPolyline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PolylineOptions&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;polylinePoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MAGENTA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;jointType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JointType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ROUND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.0f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  
&lt;span class=&quot;n&quot;&gt;flag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;                           
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;above code checks PolyLine and draws it over GoogleMap activity.&lt;/p&gt;

&lt;p&gt;Compiling all above steps and logic, we got a cute and precise trace line over Satellite Map.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://miro.medium.com/max/1000/1*qpEIDypfzkTvHotYjn6Tdw.jpeg&quot; alt=&quot;Sat. Trace SS.jpg&quot; title=&quot;Sat Screenshot&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;what-next&quot;&gt;What next?&lt;/h3&gt;

&lt;p&gt;Well… Now you know how to trace location over maps, like a cool modern cartographer 😬. Your imagination is the limit.&lt;/p&gt;

&lt;p&gt;some ideas :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The points of polygraphs, if stored in arrays or any of your fav. data structure can be passed to your database and then share that with your other apps to live track group of friends together.&lt;/li&gt;
  &lt;li&gt;Can run this service in background to store data points and then draw them whenever needed.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Saket Upadhyay</name></author><category term="Location Tracing" /><summary type="html">Android already have accurate Geo location capabilities by using multiple sources like Cellular Networks, G.P.S. and nearby Wi-Fi connections. And that’s handful of sources to extract information from, but their working and synchronisation among each other is real beauty.</summary></entry></feed>